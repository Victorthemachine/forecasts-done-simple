{"version":3,"sources":["pages/Landing.js","pages/Map.js","components/globalStyle.js","components/Theme.js","pages/Settings.js","reportWebVitals.js","redux/reducers/darkmode.reducer.js","redux/reducers/rootReducer.js","redux/store.js","index.js"],"names":["Landing","props","state","data","axios","post","config","address","port","then","res","console","log","weather","name","setState","main","catch","err","error","this","React","Component","motd","GlobalStyles","createGlobalStyle","theme","body","text","lightTheme","toggleBorder","background","darkTheme","darkmode","slideButtonHandler","bind","checked","event","id","style","settingsCSS","onChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","reducer","rootReducer","combineReducers","darkmodeReducer","store","createStore","ReactDOM","render","StrictMode","exact","path","Map","Settings","document","getElementById"],"mappings":"yUAgCeA,E,kDA1BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,eAHK,E,qDAOnB,WAAqB,IAAD,OAChBC,IAAMC,KAAN,iBAAqBC,EAAOC,QAA5B,YAAuCD,EAAOE,KAA9C,iCACKC,MAAK,SAAAC,GACFC,QAAQC,IAAI,mCACZD,QAAQC,IAAIF,GACZC,QAAQC,IAAI,mCACZ,MAAoCF,EAA5BP,KAAQU,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,KACzB,EAAKC,SAAS,CAAEZ,KAAK,GAAD,OAAKW,EAAL,aAAcD,EAAQ,GAAGG,WAEhDC,OAAM,SAAAC,GACHP,QAAQQ,MAAMD,Q,oBAI1B,WACI,OAAO,6BAAKE,KAAKlB,MAAMC,W,GAxBTkB,IAAMC,WCiBbtB,E,kDAfX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTqB,KAAM,sBAHK,E,qDAOnB,c,oBAGA,WACI,OAAO,6BAAKH,KAAKlB,MAAMqB,W,GAbTF,IAAMC,W,yCCHfE,EAAeC,YAAH,8OAGP,qBAAGC,MAAkBC,QAC1B,qBAAGD,MAAkBE,QCLrBC,EAAa,CACtBF,KAAM,OACNC,KAAM,UACNE,aAAc,OACdC,WAAY,WAEHC,EAAY,CACrBL,KAAM,UACNC,KAAM,UACNE,aAAc,UACdC,WAAY,Q,iBCsCD/B,E,kDArCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACT+B,UAAU,GAEd,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBALX,E,qDAQnB,c,gCAGA,SAAmBC,EAASC,EAAOC,GAC/BlB,KAAKL,SAAS,CAAEkB,SAAUG,M,oBAG9B,WACI,OACI,eAAC,IAAD,CAAeV,OAA+B,IAAxBN,KAAKlB,MAAM+B,SAAqBJ,EAAaG,EAAnE,UACI,cAACR,EAAD,IACA,sBAAKe,MAAOC,IAAZ,UACI,0CACA,gCACI,+BACI,6BACI,iDAEJ,6BACI,cAAC,IAAD,CAAQC,SAAUrB,KAAKc,mBAAoBE,QAAShB,KAAKlB,MAAM+B,4B,GA9BzEZ,IAAMC,WCIboB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,uCCNRO,EAAgB,CAClBjB,UAAU,GASCkB,EANC,WAAoC,IAAnCjD,EAAkC,uDAA1BgD,EACrB,OAAO,2BACAhD,GADP,IACc+B,UAAW/B,EAAM+B,YCGpBmB,EAJKC,YAAgB,CAChCpB,SAAUqB,ICCCC,EAHDC,YAAYJ,GCW1BK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,QAAZ,SACE,cAACC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,YAAZ,SACE,cAACE,EAAD,eAMVC,SAASC,eAAe,SAM1BvB,M","file":"static/js/main.53200181.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport config from '../config.json';\n\nclass Landing extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: \"Fetching...\"\n        };\n    }\n\n    componentDidMount() {\n        axios.post(`http://${config.address}:${config.port}/secure/forecast?city=london`)\n            .then(res => {\n                console.log('===============================');\n                console.log(res);\n                console.log('===============================');\n                const { data: { weather, name } } = res;\n                this.setState({ data: `${name}: ${weather[0].main}` });\n            })\n            .catch(err => {\n                console.error(err);\n            })\n    }\n\n    render() {\n        return <h1>{this.state.data}</h1>;\n    }\n}\n\nexport default Landing;","import React from 'react';\nimport axios from 'axios';\nimport config from '../config.json';\n\nclass Landing extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            motd: \"Hewwo I luv you <3\"\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return <h1>{this.state.motd}</h1>;\n    }\n}\n\nexport default Landing;","import { createGlobalStyle } from \"styled-components\"\nexport const GlobalStyles = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css?family=Oxanium&display=swap');\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    font-family: \"Oxanium\", sans-serif;\n    transition: all 0.50s linear;\n  }\n  `;\nexport default GlobalStyles;","export const lightTheme = {\n    body: '#FFF',\n    text: '#363537',\n    toggleBorder: '#FFF',\n    background: '#363537',\n}\nexport const darkTheme = {\n    body: '#363537',\n    text: '#FAFAFA',\n    toggleBorder: '#6B8096',\n    background: '#999',\n}","import React from 'react';\nimport Switch from 'react-switch';\nimport { ThemeProvider } from \"styled-components\";\n\nimport { GlobalStyles } from \"../components/globalStyle\";\nimport { lightTheme, darkTheme } from \"../components/Theme\"\nimport settingsCSS from '../styles/settings.css';\n\nclass Landing extends React.Component {\n\n    //rework darkmode var to redux\n    constructor(props) {\n        super(props);\n        this.state = {\n            darkmode: true\n        };\n        this.slideButtonHandler = this.slideButtonHandler.bind(this);\n    }\n\n    componentDidMount() {\n    }\n\n    slideButtonHandler(checked, event, id) {\n        this.setState({ darkmode: checked });\n    }\n\n    render() {\n        return (\n            <ThemeProvider theme={this.state.darkmode === false ? lightTheme : darkTheme}>\n                <GlobalStyles />\n                <div style={settingsCSS}>\n                    <h1>Settings</h1>\n                    <table>\n                        <tr>\n                            <td>\n                                <label>Darkmode: </label>\n                            </td>\n                            <td>\n                                <Switch onChange={this.slideButtonHandler} checked={this.state.darkmode} />\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n            </ThemeProvider>\n        );\n    }\n}\n\nexport default Landing;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { updateDarkmode } from '../actions/darkmode.action.js';\nconst INITIAL_STATE = {\n    darkmode: true,\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n    return {\n        ...state, darkmode: !state.darkmode,\n    };\n}\n\nexport default reducer;","import { combineReducers } from 'redux';\n\n\nimport darkmodeReducer from './darkmode.reducer';\n\n\nconst rootReducer = combineReducers({\n    darkmode: darkmodeReducer,\n});\n\nexport default rootReducer;","import { createStore } from 'redux';\n\nimport rootReducer from './reducers/rootReducer';\n\n\nconst store = createStore(rootReducer);\n\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Landing from './pages/Landing';\nimport Maps from './pages/Map';\nimport Settings from './pages/Settings';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route exact path='/'>\n            <Landing />\n          </Route>\n          <Route path='/maps'>\n            <Maps />\n          </Route>\n          <Route path='/settings'>\n            <Settings />\n          </Route>\n        </Switch>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}